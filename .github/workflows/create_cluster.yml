name: 'Create/Modify LKE Cluster'

permissions:
  contents: read

on: 
  workflow_dispatch:
    inputs:
      start_nodes_scale:
        description: 'Initial number of running worker nodes'     
        required: true
        default: '3'
      min_node_pool_scale:
        description: 'Minimal number of running worker nodes'
        required: true
        default: '3'
      max_node_pool_scale:
        description: 'Maximum number of running worker nodes'
        required: true
        default: '6'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      LINODE_CLI_TOKEN: ${{ secrets.LINODE_CLI_TOKEN }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3.0.0
        with:
          ref: 'main'

      - name: Setup Terraform variables
        id: vars
        run: |-
          cat > pipeline.auto.tfvars <<EOF
          start_nodes_scale = "${{ github.event.inputs.start_nodes_scale }}"
          min_node_pool_scale = "${{ github.event.inputs.min_node_pool_scale }}"
          max_node_pool_scale = "${{ github.event.inputs.max_node_pool_scale }}"
          EOF

      - run: cat pipeline.auto.tfvars

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: 1.2.0
          cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}
          terraform_wrapper: true

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - run: echo ${{ steps.fmt.outputs.stdout }}
      - run: echo ${{ steps.fmt.outputs.stderr }}
      - run: echo ${{ steps.fmt.outputs.exitcode }}

      - name: Terraform Format Status
        id: fmt_status
        if: steps.fmt.outcome == 'failure'
        run: exit 1

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan
        continue-on-error: true

      - run: echo ${{ steps.plan.outputs.stdout }}
      - run: echo ${{ steps.plan.outputs.stderr }}
      - run: echo ${{ steps.plan.outputs.exitcode }}

      - name: Terraform Plan Status
        id: plan_status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        continue-on-error: true

      - run: echo ${{ steps.apply.outputs.stdout }}
      - run: echo ${{ steps.apply.outputs.stderr }}
      - run: echo ${{ steps.apply.outputs.exitcode }}